@page "/CreatePosts"
@using HttpClients.ClientInterfaces
@using System.Security.Claims

@inject IPostsService PostService
@inject NavigationManager NavMgr

 <div class="post">
    
    <h3>Create your own post</h3>
     <AuthorizeView>
         <Authorized>
             <div style="text-align: left" class="field">
                 <label>Title:</label>
                 <input type="text" @bind="title"/>
             </div>
             <div class="field">
                 @* <label>Body</label> *@
                 <textarea @bind="body">Text...</textarea>
                
                 @* <input type="text" @bind="body"/> *@
                
             </div>

             <div class="field">
                 <button @onclick="CreatePost">Create Post</button>
             </div>
             @if (!string.IsNullOrEmpty(errorLabel))
             {
                 <div class="field">
                     <label style="color: red">
                         @errorLabel
                     </label>
                 </div>
             }
             @if (!string.IsNullOrEmpty(msgLabel))
             {
                 <div class="field">
                     <label style="color: green">
                         @msgLabel
                     </label>
                 </div>
             }        
     
         </Authorized>
         <NotAuthorized>
             <p>You need to be logged in before creating a post!</p>
         </NotAuthorized>
     </AuthorizeView>
 </div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private string errorLabel;
    private string msgLabel;

    private string title;
    private string body;
    private int id;
    private string userName;
    
    

    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        if (user.Identity != null)
        {
            id = Int32.Parse(user.Claims.FirstOrDefault(claim => claim.Type == "Id").Value);
        }  
    }
    
    private async Task CreatePost()
    {
        errorLabel = "";
        msgLabel = "";
        try
        {
            await PostService.CreateAsync(id, title, body);
            msgLabel = "Your Post has been successfully created!";
            title = "";
            body = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }


}